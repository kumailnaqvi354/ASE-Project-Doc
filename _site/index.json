{
  "api/ASEAssignmentDemo.Tests.AppCanvasTests.html": {
    "href": "api/ASEAssignmentDemo.Tests.AppCanvasTests.html",
    "title": "Class AppCanvasTests | mysite",
    "keywords": "Class AppCanvasTests Namespace ASEAssignmentDemo.Tests Assembly ASEAssignmentDemo.Tests.dll public class AppCanvasTests Inheritance object AppCanvasTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Circle_ValidRadius_DrawsCircle() Tests the AppCanvas.Circle(int, bool) method by verifying that drawing a circle with a valid radius executes without exceptions. [Fact] public void Circle_ValidRadius_DrawsCircle() DrawTo_ValidPosition_UpdatesPositionAndDrawsLine() Tests the DrawTo(int, int) method by verifying that drawing to a valid position correctly updates the pen's position and executes a line-drawing operation. [Fact] public void DrawTo_ValidPosition_UpdatesPositionAndDrawsLine() MoveTo_ValidCoordinates_UpdatesPenPosition() Tests the MoveTo(int, int) method by checking if moving the pen to specified coordinates updates the pen's position correctly. [Fact] public void MoveTo_ValidCoordinates_UpdatesPenPosition() MultilineProgram_ExecutesMultipleCommands_CorrectlyUpdatesCanvas() Tests a sequence of drawing commands on the AppCanvas to verify that multiple operations are correctly executed in sequence, updating the canvas state as expected. [Fact] public void MultilineProgram_ExecutesMultipleCommands_CorrectlyUpdatesCanvas() Triangle_InvalidDimensions_ThrowsException() Tests the Tri(int, int) method with invalid dimensions to verify that it throws an appropriate exception. [Fact] public void Triangle_InvalidDimensions_ThrowsException() Triangle_ValidDimensions_DrawsTriangle() Tests the Tri(int, int) method by verifying that drawing a triangle with valid width and height executes without exceptions and updates the pen position correctly. [Fact] public void Triangle_ValidDimensions_DrawsTriangle() Triangle_WithPenColorChange_DrawsTriangle() Tests the Tri(int, int) method by verifying that changing the pen color and drawing a triangle works as expected. [Fact] public void Triangle_WithPenColorChange_DrawsTriangle() WriteText_ValidText_DrawsTextOnCanvas() Tests the WriteText(string) method by verifying that drawing text on the canvas executes without exceptions. [Fact] public void WriteText_ValidText_DrawsTextOnCanvas()"
  },
  "api/ASEAssignmentDemo.Tests.UnitTest1.html": {
    "href": "api/ASEAssignmentDemo.Tests.UnitTest1.html",
    "title": "Class UnitTest1 | mysite",
    "keywords": "Class UnitTest1 Namespace ASEAssignmentDemo.Tests Assembly ASEAssignmentDemo.Tests.dll public class UnitTest1 Inheritance object UnitTest1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Test1() [Fact] public void Test1()"
  },
  "api/ASEAssignmentDemo.Tests.html": {
    "href": "api/ASEAssignmentDemo.Tests.html",
    "title": "Namespace ASEAssignmentDemo.Tests | mysite",
    "keywords": "Namespace ASEAssignmentDemo.Tests Classes AppCanvasTests UnitTest1"
  },
  "api/ASE_Assignment_Demo.AppCanvas.html": {
    "href": "api/ASE_Assignment_Demo.AppCanvas.html",
    "title": "Class AppCanvas | mysite",
    "keywords": "Class AppCanvas Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a drawable canvas that supports various shapes and text operations. Provides functionality to draw geometric shapes, move the pen, and manage canvas properties. public class AppCanvas : IAppCanvas Inheritance object AppCanvas Implements IAppCanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() Initializes a new instance of the AppCanvas class. Sets default canvas size and pen color. public AppCanvas() Properties PenColour Gets or sets the color of the pen used for drawing. public object PenColour { get; set; } Property Value object Xpos Gets or sets the current X position of the pen on the canvas. public int Xpos { get; set; } Property Value int Ypos Gets or sets the current Y position of the pen on the canvas. public int Ypos { get; set; } Property Value int Methods Circle(Real, bool) Draws a circle at the current position using the specified radius and fill option. public void Circle(Real radius, bool filled) Parameters radius Real The radius of the circle. filled bool Specifies whether the circle should be filled. Exceptions Exception Thrown when the radius is negative. Clear() Clears the canvas, filling it with a default gray background color. public void Clear() Dispose() Disposes resources used by the canvas. public void Dispose() DrawTo(int, int) Draws a line from the current pen position to the specified coordinates. public void DrawTo(int toX, int toY) Parameters toX int The X coordinate to draw to. toY int The Y coordinate to draw to. Exceptions Exception Thrown when the coordinates are out of bounds. MoveTo(int, int) Moves the pen to the specified coordinates without drawing. public void MoveTo(int x, int y) Parameters x int The new X position. y int The new Y position. Exceptions Exception Thrown when the coordinates are out of bounds. Rect(int, int, bool) Draws a rectangle at the current position using the specified dimensions and fill option. public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool Specifies whether the rectangle should be filled. Reset() Resets the canvas position to the origin (0,0). public void Reset() Set(int, int) Sets the size of the canvas and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas. ysize int The height of the canvas. SetColour(int, int, int) Sets the pen color based on the specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int Red component (0-255). green int Green component (0-255). blue int Blue component (0-255). Exceptions Exception Thrown when any color component is out of range. SetGraphics(Graphics) Sets the graphics context for the canvas. public void SetGraphics(Graphics graphics) Parameters graphics Graphics The graphics object to use for drawing. Tri(int, int) Draws a triangle at the current position using the specified dimensions. public void Tri(int width, int height) Parameters width int The width of the triangle. height int The height of the triangle. Exceptions Exception Thrown when the dimensions are invalid. ValidatePosition(int, int) Validates whether the specified coordinates are within the canvas bounds. public void ValidatePosition(int x, int y) Parameters x int The X coordinate to validate. y int The Y coordinate to validate. Exceptions Exception Thrown when the coordinates are out of bounds. WriteText(string) Writes text at the current pen position on the canvas. public void WriteText(string text) Parameters text string The text to write. Exceptions Exception Thrown if an error occurs while drawing text. getBitmap() Retrieves the bitmap representation of the canvas for rendering. public object getBitmap() Returns object The bitmap object representing the canvas."
  },
  "api/ASE_Assignment_Demo.Commands.CircleCommand.html": {
    "href": "api/ASE_Assignment_Demo.Commands.CircleCommand.html",
    "title": "Class CircleCommand | mysite",
    "keywords": "Class CircleCommand Namespace ASE_Assignment_Demo.Commands Assembly ASE Assignment Demo.dll Command that represents drawing a circle on the canvas. public class CircleCommand : ICustomCommand Inheritance object CircleCommand Implements ICustomCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CircleCommand(Real, bool) Initializes a new instance of the CircleCommand class. public CircleCommand(Real radius, bool filled) Parameters radius Real The radius of the circle. filled bool Indicates whether the circle should be filled. Exceptions ArgumentNullException Thrown if radius is null. Methods Execute(IAppCanvas) Executes the circle drawing command on the given canvas. public void Execute(IAppCanvas canvas) Parameters canvas IAppCanvas The canvas on which to draw the circle. Exceptions ArgumentNullException Thrown if canvas is null."
  },
  "api/ASE_Assignment_Demo.Commands.MoveToCommand.html": {
    "href": "api/ASE_Assignment_Demo.Commands.MoveToCommand.html",
    "title": "Class MoveToCommand | mysite",
    "keywords": "Class MoveToCommand Namespace ASE_Assignment_Demo.Commands Assembly ASE Assignment Demo.dll Command that represents moving the drawing position on the canvas. public class MoveToCommand : ICustomCommand Inheritance object MoveToCommand Implements ICustomCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MoveToCommand(Int, Int) Initializes a new instance of the MoveToCommand class. public MoveToCommand(Int x, Int y) Parameters x Int The X coordinate to move to. y Int The Y coordinate to move to. Methods Execute(IAppCanvas) Executes the command to move the drawing position on the canvas. public void Execute(IAppCanvas canvas) Parameters canvas IAppCanvas The canvas on which to move the drawing position."
  },
  "api/ASE_Assignment_Demo.Commands.RectCommand.html": {
    "href": "api/ASE_Assignment_Demo.Commands.RectCommand.html",
    "title": "Class RectCommand | mysite",
    "keywords": "Class RectCommand Namespace ASE_Assignment_Demo.Commands Assembly ASE Assignment Demo.dll Command that represents drawing a rectangle on the canvas. public class RectCommand : ICustomCommand Inheritance object RectCommand Implements ICustomCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RectCommand(Int, Int, bool) Initializes a new instance of the RectCommand class. public RectCommand(Int width, Int height, bool filled) Parameters width Int The width of the rectangle. height Int The height of the rectangle. filled bool Indicates whether the rectangle should be filled (true) or outlined (false). Methods Execute(IAppCanvas) Executes the command to draw a rectangle on the canvas. public void Execute(IAppCanvas canvas) Parameters canvas IAppCanvas The canvas on which to draw the rectangle."
  },
  "api/ASE_Assignment_Demo.Commands.SetPenCommand.html": {
    "href": "api/ASE_Assignment_Demo.Commands.SetPenCommand.html",
    "title": "Class SetPenCommand | mysite",
    "keywords": "Class SetPenCommand Namespace ASE_Assignment_Demo.Commands Assembly ASE Assignment Demo.dll Command that represents setting the pen color on the canvas. public class SetPenCommand : ICustomCommand Inheritance object SetPenCommand Implements ICustomCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SetPenCommand(Int, Int, Int) Initializes a new instance of the SetPenCommand class. public SetPenCommand(Int red, Int green, Int blue) Parameters red Int The red component of the pen color (0-255). green Int The green component of the pen color (0-255). blue Int The blue component of the pen color (0-255). Methods Execute(IAppCanvas) Executes the command to set the pen color on the canvas. public void Execute(IAppCanvas canvas) Parameters canvas IAppCanvas The canvas to apply the pen color."
  },
  "api/ASE_Assignment_Demo.Commands.TriangleCommand.html": {
    "href": "api/ASE_Assignment_Demo.Commands.TriangleCommand.html",
    "title": "Class TriangleCommand | mysite",
    "keywords": "Class TriangleCommand Namespace ASE_Assignment_Demo.Commands Assembly ASE Assignment Demo.dll Represents a command to draw a triangle on the canvas. public class TriangleCommand : ICustomCommand Inheritance object TriangleCommand Implements ICustomCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriangleCommand(Int, Int) Initializes a new instance of the TriangleCommand class. public TriangleCommand(Int width, Int height) Parameters width Int The width of the triangle. height Int The height of the triangle. Methods Execute(IAppCanvas) Executes the triangle drawing command on the canvas. public void Execute(IAppCanvas canvas) Parameters canvas IAppCanvas The canvas on which to draw the triangle."
  },
  "api/ASE_Assignment_Demo.Commands.html": {
    "href": "api/ASE_Assignment_Demo.Commands.html",
    "title": "Namespace ASE_Assignment_Demo.Commands | mysite",
    "keywords": "Namespace ASE_Assignment_Demo.Commands Classes CircleCommand Command that represents drawing a circle on the canvas. MoveToCommand Command that represents moving the drawing position on the canvas. RectCommand Command that represents drawing a rectangle on the canvas. SetPenCommand Command that represents setting the pen color on the canvas. TriangleCommand Represents a command to draw a triangle on the canvas."
  },
  "api/ASE_Assignment_Demo.Dynamic.Int.html": {
    "href": "api/ASE_Assignment_Demo.Dynamic.Int.html",
    "title": "Class Int | mysite",
    "keywords": "Class Int Namespace ASE_Assignment_Demo.Dynamic Assembly ASE Assignment Demo.dll Represents an integer value encapsulated within a custom class. public class Int Inheritance object Int Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Int(int) Initializes a new instance of the Int class with a specified value. public Int(int value) Parameters value int The integer value to encapsulate. Methods GetValue() Retrieves the encapsulated integer value. public int GetValue() Returns int The integer value. SetValue(int) Sets a new value for the encapsulated integer. public void SetValue(int value) Parameters value int The new integer value to set. ToString() Returns a string representation of the encapsulated integer value. public override string ToString() Returns string The string representation of the integer value."
  },
  "api/ASE_Assignment_Demo.Dynamic.Real.html": {
    "href": "api/ASE_Assignment_Demo.Dynamic.Real.html",
    "title": "Class Real | mysite",
    "keywords": "Class Real Namespace ASE_Assignment_Demo.Dynamic Assembly ASE Assignment Demo.dll Represents a wrapper for real (double) values. public class Real Inheritance object Real Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Real(double) Initializes a new instance of the Real class with a specified real value. public Real(double value) Parameters value double The real value to encapsulate. Methods GetValue() Retrieves the stored real value. public double GetValue() Returns double The stored real value. SetValue(double) Sets a new value for the stored real value. public void SetValue(double value) Parameters value double The new real value to set. ToString() Returns a string representation of the stored real value. public override string ToString() Returns string The string representation of the real value."
  },
  "api/ASE_Assignment_Demo.Dynamic.html": {
    "href": "api/ASE_Assignment_Demo.Dynamic.html",
    "title": "Namespace ASE_Assignment_Demo.Dynamic | mysite",
    "keywords": "Namespace ASE_Assignment_Demo.Dynamic Classes Int Represents an integer value encapsulated within a custom class. Real Represents a wrapper for real (double) values."
  },
  "api/ASE_Assignment_Demo.Factories.CommandFactory.html": {
    "href": "api/ASE_Assignment_Demo.Factories.CommandFactory.html",
    "title": "Class CommandFactory | mysite",
    "keywords": "Class CommandFactory Namespace ASE_Assignment_Demo.Factories Assembly ASE Assignment Demo.dll Factory class responsible for creating instances of specific commands based on the provided command name. public class CommandFactory Inheritance object CommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateCommand(string, params object[]) Creates an instance of a specific command based on the provided command name and arguments. public ICustomCommand CreateCommand(string commandName, params object[] args) Parameters commandName string The name of the command to create. args object[] The arguments to pass to the command constructor. Returns ICustomCommand An instance of the corresponding ICustomCommand. Exceptions ArgumentException Thrown if the command name is unknown or if the arguments are invalid for the command."
  },
  "api/ASE_Assignment_Demo.Factories.html": {
    "href": "api/ASE_Assignment_Demo.Factories.html",
    "title": "Namespace ASE_Assignment_Demo.Factories | mysite",
    "keywords": "Namespace ASE_Assignment_Demo.Factories Classes CommandFactory Factory class responsible for creating instances of specific commands based on the provided command name."
  },
  "api/ASE_Assignment_Demo.Form1.html": {
    "href": "api/ASE_Assignment_Demo.Form1.html",
    "title": "Class Form1 | mysite",
    "keywords": "Class Form1 Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents the main form of the application where drawing operations can be performed. This form integrates drawing functionality using the BOOSE library, allowing users to execute commands and display graphical output. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes a new instance of the Form1 class. Sets up the canvas and initializes the drawing context, including the configuration of BOOSE library components such as the parser and program storage. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment_Demo.IAppCanvas.html": {
    "href": "api/ASE_Assignment_Demo.IAppCanvas.html",
    "title": "Interface IAppCanvas | mysite",
    "keywords": "Interface IAppCanvas Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Extends the base interface with additional functionalities for canvas operations. public interface IAppCanvas Methods Circle(Real, bool) Draws a circle at the current position on the canvas. void Circle(Real radius, bool filled) Parameters radius Real The radius of the circle. filled bool Whether the circle should be filled. MoveTo(int, int) Moves the drawing position to the specified coordinates on the canvas. void MoveTo(int x, int y) Parameters x int The X coordinate to move to. y int The Y coordinate to move to. Rect(int, int, bool) Draws a rectangle at the current position on the canvas. void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool Whether the rectangle should be filled (true) or just outlined (false). Reset() Resets the canvas position to (0, 0). void Reset() SetColour(int, int, int) Sets the pen color using RGB values. void SetColour(int red, int green, int blue) Parameters red int Red component (0-255). green int Green component (0-255). blue int Blue component (0-255). SetGraphics(Graphics) Sets the graphics context for the canvas. void SetGraphics(Graphics graphics) Parameters graphics Graphics The graphics object used for rendering. Tri(int, int) Draws a triangle at the current position on the canvas. void Tri(int width, int height) Parameters width int The width of the triangle. height int The height of the triangle. ValidatePosition(int, int) Validates whether the given position is within the bounds of the canvas. void ValidatePosition(int x, int y) Parameters x int The X coordinate of the position to validate. y int The Y coordinate of the position to validate. WriteText(string) Writes text at the current position on the canvas. void WriteText(string text) Parameters text string The text to be written. getBitmap() Retrieves the current bitmap of the canvas. object getBitmap() Returns object The bitmap object representing the current state of the canvas."
  },
  "api/ASE_Assignment_Demo.Interfaces.ICustomCommand.html": {
    "href": "api/ASE_Assignment_Demo.Interfaces.ICustomCommand.html",
    "title": "Interface ICustomCommand | mysite",
    "keywords": "Interface ICustomCommand Namespace ASE_Assignment_Demo.Interfaces Assembly ASE Assignment Demo.dll Represents a command that can be executed on a canvas. public interface ICustomCommand Methods Execute(IAppCanvas) Executes the command on the specified canvas. void Execute(IAppCanvas canvas) Parameters canvas IAppCanvas The canvas on which the command is executed."
  },
  "api/ASE_Assignment_Demo.Interfaces.html": {
    "href": "api/ASE_Assignment_Demo.Interfaces.html",
    "title": "Namespace ASE_Assignment_Demo.Interfaces | mysite",
    "keywords": "Namespace ASE_Assignment_Demo.Interfaces Interfaces ICustomCommand Represents a command that can be executed on a canvas."
  },
  "api/ASE_Assignment_Demo.html": {
    "href": "api/ASE_Assignment_Demo.html",
    "title": "Namespace ASE_Assignment_Demo | mysite",
    "keywords": "Namespace ASE_Assignment_Demo Classes AppCanvas Represents a drawable canvas that supports various shapes and text operations. Provides functionality to draw geometric shapes, move the pen, and manage canvas properties. Form1 Represents the main form of the application where drawing operations can be performed. This form integrates drawing functionality using the BOOSE library, allowing users to execute commands and display graphical output. Interfaces IAppCanvas Extends the base interface with additional functionalities for canvas operations."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | mysite",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | mysite",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | mysite",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}